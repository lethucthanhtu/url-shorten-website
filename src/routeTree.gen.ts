/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenImport } from './routes/authen'
import { Route as UserImport } from './routes/_user'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as RedirectIdImport } from './routes/_redirect.$id'
import { Route as AuthDefaultImport } from './routes/_auth/_default'
import { Route as AuthDefaultSettingsImport } from './routes/_auth/_default/settings'
import { Route as AuthDefaultDashboardImport } from './routes/_auth/_default/dashboard'
import { Route as legacyLocaleLocaleImport } from './routes/(legacy)/_locale.$locale'
import { Route as AuthDefaultLinkIdImport } from './routes/_auth/_default/link.$id'

// Create/Update Routes

const AuthenRoute = AuthenImport.update({
  id: '/authen',
  path: '/authen',
  getParentRoute: () => rootRoute,
} as any)

const UserRoute = UserImport.update({
  id: '/_user',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RedirectIdRoute = RedirectIdImport.update({
  id: '/_redirect/$id',
  path: '/$id',
  getParentRoute: () => rootRoute,
} as any)

const AuthDefaultRoute = AuthDefaultImport.update({
  id: '/_default',
  getParentRoute: () => AuthRoute,
} as any)

const AuthDefaultSettingsRoute = AuthDefaultSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthDefaultRoute,
} as any)

const AuthDefaultDashboardRoute = AuthDefaultDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthDefaultRoute,
} as any)

const legacyLocaleLocaleRoute = legacyLocaleLocaleImport.update({
  id: '/(legacy)/_locale/$locale',
  path: '/$locale',
  getParentRoute: () => rootRoute,
} as any)

const AuthDefaultLinkIdRoute = AuthDefaultLinkIdImport.update({
  id: '/link/$id',
  path: '/link/$id',
  getParentRoute: () => AuthDefaultRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_user': {
      id: '/_user'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UserImport
      parentRoute: typeof rootRoute
    }
    '/authen': {
      id: '/authen'
      path: '/authen'
      fullPath: '/authen'
      preLoaderRoute: typeof AuthenImport
      parentRoute: typeof rootRoute
    }
    '/_auth/_default': {
      id: '/_auth/_default'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthDefaultImport
      parentRoute: typeof AuthImport
    }
    '/_redirect/$id': {
      id: '/_redirect/$id'
      path: '/$id'
      fullPath: '/$id'
      preLoaderRoute: typeof RedirectIdImport
      parentRoute: typeof rootRoute
    }
    '/(legacy)/_locale/$locale': {
      id: '/(legacy)/_locale/$locale'
      path: '/$locale'
      fullPath: '/$locale'
      preLoaderRoute: typeof legacyLocaleLocaleImport
      parentRoute: typeof rootRoute
    }
    '/_auth/_default/dashboard': {
      id: '/_auth/_default/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDefaultDashboardImport
      parentRoute: typeof AuthDefaultImport
    }
    '/_auth/_default/settings': {
      id: '/_auth/_default/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthDefaultSettingsImport
      parentRoute: typeof AuthDefaultImport
    }
    '/_auth/_default/link/$id': {
      id: '/_auth/_default/link/$id'
      path: '/link/$id'
      fullPath: '/link/$id'
      preLoaderRoute: typeof AuthDefaultLinkIdImport
      parentRoute: typeof AuthDefaultImport
    }
  }
}

// Create and export the route tree

interface AuthDefaultRouteChildren {
  AuthDefaultDashboardRoute: typeof AuthDefaultDashboardRoute
  AuthDefaultSettingsRoute: typeof AuthDefaultSettingsRoute
  AuthDefaultLinkIdRoute: typeof AuthDefaultLinkIdRoute
}

const AuthDefaultRouteChildren: AuthDefaultRouteChildren = {
  AuthDefaultDashboardRoute: AuthDefaultDashboardRoute,
  AuthDefaultSettingsRoute: AuthDefaultSettingsRoute,
  AuthDefaultLinkIdRoute: AuthDefaultLinkIdRoute,
}

const AuthDefaultRouteWithChildren = AuthDefaultRoute._addFileChildren(
  AuthDefaultRouteChildren,
)

interface AuthRouteChildren {
  AuthDefaultRoute: typeof AuthDefaultRouteWithChildren
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthDefaultRoute: AuthDefaultRouteWithChildren,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthDefaultRouteWithChildren
  '/authen': typeof AuthenRoute
  '/$id': typeof RedirectIdRoute
  '/$locale': typeof legacyLocaleLocaleRoute
  '/dashboard': typeof AuthDefaultDashboardRoute
  '/settings': typeof AuthDefaultSettingsRoute
  '/link/$id': typeof AuthDefaultLinkIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthDefaultRouteWithChildren
  '/authen': typeof AuthenRoute
  '/$id': typeof RedirectIdRoute
  '/$locale': typeof legacyLocaleLocaleRoute
  '/dashboard': typeof AuthDefaultDashboardRoute
  '/settings': typeof AuthDefaultSettingsRoute
  '/link/$id': typeof AuthDefaultLinkIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_user': typeof UserRoute
  '/authen': typeof AuthenRoute
  '/_auth/_default': typeof AuthDefaultRouteWithChildren
  '/_redirect/$id': typeof RedirectIdRoute
  '/(legacy)/_locale/$locale': typeof legacyLocaleLocaleRoute
  '/_auth/_default/dashboard': typeof AuthDefaultDashboardRoute
  '/_auth/_default/settings': typeof AuthDefaultSettingsRoute
  '/_auth/_default/link/$id': typeof AuthDefaultLinkIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/authen'
    | '/$id'
    | '/$locale'
    | '/dashboard'
    | '/settings'
    | '/link/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/authen'
    | '/$id'
    | '/$locale'
    | '/dashboard'
    | '/settings'
    | '/link/$id'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_user'
    | '/authen'
    | '/_auth/_default'
    | '/_redirect/$id'
    | '/(legacy)/_locale/$locale'
    | '/_auth/_default/dashboard'
    | '/_auth/_default/settings'
    | '/_auth/_default/link/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  UserRoute: typeof UserRoute
  AuthenRoute: typeof AuthenRoute
  RedirectIdRoute: typeof RedirectIdRoute
  legacyLocaleLocaleRoute: typeof legacyLocaleLocaleRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  UserRoute: UserRoute,
  AuthenRoute: AuthenRoute,
  RedirectIdRoute: RedirectIdRoute,
  legacyLocaleLocaleRoute: legacyLocaleLocaleRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/_user",
        "/authen",
        "/_redirect/$id",
        "/(legacy)/_locale/$locale"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/_default"
      ]
    },
    "/_user": {
      "filePath": "_user.tsx"
    },
    "/authen": {
      "filePath": "authen.tsx"
    },
    "/_auth/_default": {
      "filePath": "_auth/_default.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/_default/dashboard",
        "/_auth/_default/settings",
        "/_auth/_default/link/$id"
      ]
    },
    "/_redirect/$id": {
      "filePath": "_redirect.$id.tsx"
    },
    "/(legacy)/_locale/$locale": {
      "filePath": "(legacy)/_locale.$locale.tsx"
    },
    "/_auth/_default/dashboard": {
      "filePath": "_auth/_default/dashboard.tsx",
      "parent": "/_auth/_default"
    },
    "/_auth/_default/settings": {
      "filePath": "_auth/_default/settings.tsx",
      "parent": "/_auth/_default"
    },
    "/_auth/_default/link/$id": {
      "filePath": "_auth/_default/link.$id.tsx",
      "parent": "/_auth/_default"
    }
  }
}
ROUTE_MANIFEST_END */
